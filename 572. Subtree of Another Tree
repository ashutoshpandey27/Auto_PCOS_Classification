/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

    private:

    bool ans = false;

    void findNode(TreeNode* root , TreeNode* root1)
    {
        if(!root)
            return;

        if(root->val == root1->val)
        {
            if(!ans)
            {
                ans = solve(root , root1);
            }
        }

       findNode(root->left , root1);

       findNode(root->right , root1);

    }

    bool solve(TreeNode* root , TreeNode* root1)
    {
        if(!root and !root1)
            return true;

        if(!root1 or !root)
            return false;

        if(root->val != root1->val)
            return false;

        bool leftAns = solve(root->left , root1->left);

        bool rightAns = solve(root->right , root1->right);

        return leftAns and rightAns;

    }
public:
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {

        findNode(root , subRoot);

        return ans;
        
    }
};
